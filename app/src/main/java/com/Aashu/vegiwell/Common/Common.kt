package com.AashuDeveloper.vegiwell.Commonimport android.app.NotificationChannelimport android.app.NotificationManagerimport android.app.PendingIntentimport android.content.ContentResolverimport android.content.Contextimport android.content.Intentimport android.graphics.BitmapFactoryimport android.graphics.Colorimport android.graphics.Typefaceimport android.media.AudioAttributesimport android.net.Uriimport android.os.Buildimport android.text.Spannableimport android.text.SpannableStringimport android.text.SpannableStringBuilderimport android.text.style.StrikethroughSpanimport android.text.style.StyleSpanimport android.widget.TextViewimport android.widget.Toastimport androidx.core.app.NotificationCompatimport com.AashuDeveloper.vegiwell.Model.*import com.AashuDeveloper.vegiwell.Rimport com.google.firebase.database.FirebaseDatabaseimport java.math.RoundingModeimport java.text.DecimalFormatimport kotlin.math.roundToIntobject Common {    fun formatPrice(Price: Double): String {        if (Price != 0.toDouble()) {            val df = DecimalFormat("#,##0.00")            df.roundingMode = RoundingMode.HALF_UP            val finalPrice = StringBuilder(df.format(Price)).toString()            return finalPrice.replace(".", ".")        } else            return "0,00"    }    fun calculateExtraPrice(userSelectedSize: SizeModel?, userSelectedAddon: MutableList<AddonModel>?): Double {        var result: Double = 0.0        if (userSelectedSize == null && userSelectedAddon == null)            return 0.0        else if (userSelectedSize == null) {            for (addonModel in userSelectedAddon!!)                result += addonModel.price!!.toDouble()            return result        } else if (userSelectedAddon == null) {            result = userSelectedSize!!.price!!.toDouble()            return result        } else {            result = userSelectedSize!!.price!!.toDouble()            for (addonModel in userSelectedAddon!!)                result += addonModel.price!!.toDouble()            return result        }    }    fun setSpanString(welcome: String, name: String?, txtUser: TextView?) {        val builder = SpannableStringBuilder()        builder.append(welcome)        val txtSpannable = SpannableString(name)        val boldspan = StyleSpan(Typeface.BOLD)        txtSpannable.setSpan(boldspan, 0, name!!.length, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE)        builder.append(txtSpannable)        txtUser!!.setText(builder, TextView.BufferType.SPANNABLE)    }    fun createOrderNumber(): String {        return StringBuilder()                .append(System.currentTimeMillis())                .append(Math.abs(java.util.Random().nextInt()))        // append(Math.abs(Random().nextInt()))                .toString()    }    fun getDateOfWeek(i: Int): String {        when (i) {            1 -> return "Monday"            2 -> return "Tuesday"            3 -> return "Wednesday"            4 -> return "Thursday"            5 -> return "Friday"            6 -> return "Saturday"            7 -> return "Sunday"            else -> return "Vegiwell"        }    }    fun convertStatusToText(orderStatus: Int): Any {        when (orderStatus) {            0 -> return "On The Way"            1 -> return "Order Packed"            2 -> return "Order placed successfully"            -1 -> return "Cancelled"            else -> return "Unk"        }    }    fun updateToken(context: Context, token: String) {        if(Common.currentuser?.uid != null)        FirebaseDatabase.getInstance()                .getReference(Common.TOKEN_REF)                .child(Common.currentuser?.uid!!)                .setValue(TokenModel(Common.currentuser!!.Phone!!, token))                .addOnFailureListener { e -> Toast.makeText(context, "" + e.message, Toast.LENGTH_SHORT).show() }    }    fun showNotification(context: Context, id: Int, title: String?, content: String?, intent: Intent?) {        var pendingIntent: PendingIntent? = null        if (intent != null)            pendingIntent = PendingIntent.getActivity(context, id, intent, PendingIntent.FLAG_UPDATE_CURRENT)        val NOTIFICAION_CHANNEL_ID = "VEGIWELL"        val notificationManager = context.getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager        val bellring = Uri.parse("${ContentResolver.SCHEME_ANDROID_RESOURCE}://" + context.packageName + "/" + R.raw.order)        val audioAttributes = AudioAttributes.Builder()            .setContentType(AudioAttributes.CONTENT_TYPE_MUSIC)            .build()        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {            val notificationChannel = NotificationChannel(NOTIFICAION_CHANNEL_ID,                "Vegiwell", NotificationManager.IMPORTANCE_DEFAULT)            notificationChannel.description = "Vegiwell"            notificationChannel.enableLights(true)            notificationChannel.enableVibration(true)            notificationChannel.lightColor = (Color.GREEN)            notificationChannel.vibrationPattern = longArrayOf(0, 1000, 500, 1000)            notificationChannel.setSound(bellring, audioAttributes)            notificationManager.createNotificationChannel(notificationChannel)        }        val builder = NotificationCompat.Builder(context, NOTIFICAION_CHANNEL_ID)        val a = "Order Status"        builder.setContentTitle(title!!)            .setContentText(content!!)            .setAutoCancel(true)            .setPriority(NotificationCompat.PRIORITY_HIGH)            //   .setSound(Uri.parse("${ContentResolver.SCHEME_ANDROID_RESOURCE}://" + context.packageName + "/" + R.raw.namste))            .setSound(context.getResourceUri(R.raw.order))            .setSmallIcon(R.mipmap.ic_vegiwell_round)            .setStyle(NotificationCompat.BigTextStyle().bigText(content).setSummaryText(a))            // .setStyle(NotificationCompat.BigTextStyle().setSummaryText(content).setBigContentTitle(title))            .setLargeIcon(BitmapFactory.decodeResource(context.resources, R.drawable.newimage))         if (pendingIntent != null)            builder.setContentIntent(pendingIntent)        val notification = builder.build()        notificationManager.notify(id, notification)    }    fun Context.getResourceUri(resourceId: Int): Uri = Uri.Builder()            .scheme(ContentResolver.SCHEME_ANDROID_RESOURCE)            .authority(packageName)            .path(resourceId.toString())            .build()    fun getNewOrderTopic(): String {        return "/topics/new_order"    }    const val NOTI_TITLE = "title"    const val NOTI_CONTENT = "content"    const val ORDER_REF: String = "Order"    const val COMMENT_REF: String = "Comments"    var foodSelected: FoodModel? = null    var categoryselected: CategoryModel? = null    const val CATEGORY_REF: String = "Category"    val FULL_WIDTH_COLUMN: Int = 1    val DEFAULT_COLUMN_COUNT: Int = 0    const val BEST_DEAL_REF: String = "BestDeals"    const val POPULAR_REF: String = "MostPopular"    const val USER_REFERENCE = "Users"    var currentuser: UserModel? = null    const val TOKEN_REF = "Tokens"}